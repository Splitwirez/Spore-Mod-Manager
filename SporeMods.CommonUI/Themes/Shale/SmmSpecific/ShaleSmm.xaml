<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:cui="clr-namespace:SporeMods.CommonUI"
					xmlns:core="clr-namespace:SporeMods.Core;assembly=SporeMods.Core"
					xmlns:mods="clr-namespace:SporeMods.Core.Mods;assembly=SporeMods.Core"
					xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
					xmlns:shale="clr-namespace:SporeMods.CommonUI.Themes.Shale"
					xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:vm="clr-namespace:SporeMods.ViewModels">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Shale.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Converters.xaml"/>

        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/SmmSpecific/Styles/Footer.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/SmmSpecific/Styles/Mods.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/SmmSpecific/Styles/Settings.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/SmmSpecific/Styles/Modals.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <Style x:Key="{x:Type ContentPresenter}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Resources>
            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}"/>
        </Style.Resources>
    </Style>


    <!--LinearGradientBrush x:Key="TopDownMaskBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="FromLeftMaskBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="FromRightMaskBrush" StartPoint="1,0" EndPoint="0,0">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="BottomUpMaskBrush" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush-->

    





    

    <Style x:Key="hBase">
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
    </Style>

    <!--### Giant header ###-->
    <Style x:Key="h1" BasedOn="{StaticResource hBase}">
        <Setter Property="TextElement.FontSize" Value="24"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
    </Style>

    <!--### Header ###-->
    <Style x:Key="h2" BasedOn="{StaticResource hBase}">
        <Setter Property="TextElement.FontSize" Value="16"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
    </Style>

    <!--### Small header/subheader ###-->
    <Style x:Key="h3" BasedOn="{StaticResource hBase}">
        <Setter Property="TextElement.FontSize" Value="12"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
    </Style>

    
    <sys:Double x:Key="ToolTipContentMaxWidth">300</sys:Double>

    <!--### Text seen in tooltip ###-->
    <Style x:Key="ToolTipText">
        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
        <Setter Property="Control.MaxWidth" Value="{DynamicResource ToolTipContentMaxWidth}"/>
    </Style>

    <!--### Warning seen in tooltip ###-->
    <Style x:Key="ToolTipWarning" BasedOn="{StaticResource ToolTipText}">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource ErrorTextBrush}"/>
    </Style>

    <!--### Mod name in mod list entry ###-->
    <Style x:Key="InstalledModHeader"/>

    <!--Style x:Name="ModConfiguratorComponentsListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <cui:FloorPanel>
                        <cui:FloorPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Visible" />
                        </cui:FloorPanel>
                    </cui:FloorPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModConfiguratorModNameTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource h2}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding HasLogo}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InitialModConfiguratorZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <cui:FloorPanel>
                        <cui:FloorPanel Margin="0,50">
                            <Rectangle VerticalAlignment="Top" Height="18" IsHitTestVisible="False">
                                <Rectangle.Fill>
                                    <LinearGradientBrush Opacity="0.75" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False">
                                <Rectangle.Fill>
                                    <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </cui:FloorPanel>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </cui:FloorPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ModConfiguratorZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource InitialModConfiguratorZoneStyle}">
        <Setter Property="Margin" Value="0,-30,0,0"/>
    </Style-->

    <Style x:Key="FolderNotFoundListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ListViewItemStyle}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type core:DetectionFailureGuessFolder}">
                    <StackPanel Orientation="Vertical">
                        <TextBlock x:Name="PathTypeTextBlock" Style="{DynamicResource h2}" HorizontalAlignment="Left" TextAlignment="Left" Text="{DynamicResource FolderNotFoundUnknown}"/>
                        <TextBlock Text="{Binding GuessPath}" TextWrapping="Wrap" HorizontalAlignment="Left" TextAlignment="Left"/>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding GuessType}" Value="Disk">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Disk}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="Origin">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Origin}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="OriginPatched">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Gog}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="Steam">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Unknown}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="SteamPatched">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource ProbablyGOGGuessText}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="LanguagesComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Padding" Value="5" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <cui:FloorPanel>
                        <ToggleButton x:Name="ToggleButton" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right" Width="18" cui:AttachedProperties.CornerCurves="False,True,True,False">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <cui:FloorPanel>
                                                    <Border x:Name="IdleBackground" CornerRadius="0,3,3,0" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="0,2,2,0" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                                        <Path.RenderTransform>
                                                            <RotateTransform Angle="0"/>
                                                        </Path.RenderTransform>
                                                    </Path>
                                                </cui:FloorPanel>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
														 Storyboard.TargetProperty="Opacity" To="1"
														 Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
														 Storyboard.TargetProperty="Opacity" To="0"
														 Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <cui:FloorPanel VerticalAlignment="Stretch" Visibility="Collapsed" IsHitTestVisible="False">
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                            <cui:FloorPanel VerticalAlignment="Stretch">
                                <TextBox x:Name="PART_EditableTextBox" Margin="0,0,17,0" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" autocomp:AutoCompleteBehavior.AutoCompleteItemsSource="{TemplateBinding ItemsSource}">
                                    <cui:AttachedProperties.CornerCurves>
                                        <cui:CornerCurves TopLeft="True" TopRight="False" BottomRight="False" BottomLeft="True"/>
                                    </cui:AttachedProperties.CornerCurves>
                                </TextBox>
                            </cui:FloorPanel>
                        </cui:FloorPanel>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Border x:Name="DropDownBorder" BorderThickness="1" UseLayoutRounding="True" Effect="{DynamicResource SecondaryDropShadow}" Margin="4,3,4,5">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <cui:FloorPanel x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <ScrollViewer Padding="3,3,3,0" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </cui:FloorPanel>
                            </Border>
                        </Popup>
                    </cui:FloorPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="False">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <Style x:Key="{x:Type cui:Zone}" TargetType="{x:Type cui:Zone}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cui:Zone}">
                    <!--Border Background="#FF00FF"-->
                        <ContentPresenter/>
                    <!--/Border-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
